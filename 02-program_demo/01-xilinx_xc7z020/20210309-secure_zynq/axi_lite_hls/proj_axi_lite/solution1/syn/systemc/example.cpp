// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "example.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic example::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic example::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> example::ap_ST_fsm_state1 = "1";
const sc_lv<3> example::ap_ST_fsm_state2 = "10";
const sc_lv<3> example::ap_ST_fsm_state3 = "100";
const sc_lv<32> example::ap_const_lv32_0 = "00000000000000000000000000000000";
const int example::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> example::ap_const_lv32_1 = "1";
const sc_lv<32> example::ap_const_lv32_2 = "10";
const bool example::ap_const_boolean_1 = true;

example::example(sc_module_name name) : sc_module(name), mVcdFile(0) {
    example_BUS_A_s_axi_U = new example_BUS_A_s_axi<C_S_AXI_BUS_A_ADDR_WIDTH,C_S_AXI_BUS_A_DATA_WIDTH>("example_BUS_A_s_axi_U");
    example_BUS_A_s_axi_U->AWVALID(s_axi_BUS_A_AWVALID);
    example_BUS_A_s_axi_U->AWREADY(s_axi_BUS_A_AWREADY);
    example_BUS_A_s_axi_U->AWADDR(s_axi_BUS_A_AWADDR);
    example_BUS_A_s_axi_U->WVALID(s_axi_BUS_A_WVALID);
    example_BUS_A_s_axi_U->WREADY(s_axi_BUS_A_WREADY);
    example_BUS_A_s_axi_U->WDATA(s_axi_BUS_A_WDATA);
    example_BUS_A_s_axi_U->WSTRB(s_axi_BUS_A_WSTRB);
    example_BUS_A_s_axi_U->ARVALID(s_axi_BUS_A_ARVALID);
    example_BUS_A_s_axi_U->ARREADY(s_axi_BUS_A_ARREADY);
    example_BUS_A_s_axi_U->ARADDR(s_axi_BUS_A_ARADDR);
    example_BUS_A_s_axi_U->RVALID(s_axi_BUS_A_RVALID);
    example_BUS_A_s_axi_U->RREADY(s_axi_BUS_A_RREADY);
    example_BUS_A_s_axi_U->RDATA(s_axi_BUS_A_RDATA);
    example_BUS_A_s_axi_U->RRESP(s_axi_BUS_A_RRESP);
    example_BUS_A_s_axi_U->BVALID(s_axi_BUS_A_BVALID);
    example_BUS_A_s_axi_U->BREADY(s_axi_BUS_A_BREADY);
    example_BUS_A_s_axi_U->BRESP(s_axi_BUS_A_BRESP);
    example_BUS_A_s_axi_U->ACLK(ap_clk);
    example_BUS_A_s_axi_U->ARESET(ap_rst_n_inv);
    example_BUS_A_s_axi_U->ACLK_EN(ap_var_for_const0);
    example_BUS_A_s_axi_U->ap_start(ap_start);
    example_BUS_A_s_axi_U->interrupt(interrupt);
    example_BUS_A_s_axi_U->ap_ready(ap_ready);
    example_BUS_A_s_axi_U->ap_done(ap_done);
    example_BUS_A_s_axi_U->ap_idle(ap_idle);
    example_BUS_A_s_axi_U->a(a);
    example_BUS_A_s_axi_U->b(b);
    example_BUS_A_s_axi_U->c_o(c_1_data_reg);
    example_BUS_A_s_axi_U->c_o_ap_vld(c_1_vld_reg);
    example_BUS_A_s_axi_U->c_i(c_i);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln103_1_fu_58_p2);
    sensitive << ( b_read_reg_69 );
    sensitive << ( add_ln103_fu_53_p2 );

    SC_METHOD(thread_add_ln103_fu_53_p2);
    sensitive << ( c_0_data_reg );
    sensitive << ( a_read_reg_64 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( c_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( c_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_c_0_ack_out);
    sensitive << ( c_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_c_1_ack_in);
    sensitive << ( c_1_vld_reg );

    SC_METHOD(thread_c_1_vld_in);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    c_0_data_reg = "00000000";
    c_0_vld_reg = SC_LOGIC_0;
    c_1_data_reg = "00000000";
    c_1_vld_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "example_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_BUS_A_AWVALID, "(port)s_axi_BUS_A_AWVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_AWREADY, "(port)s_axi_BUS_A_AWREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_AWADDR, "(port)s_axi_BUS_A_AWADDR");
    sc_trace(mVcdFile, s_axi_BUS_A_WVALID, "(port)s_axi_BUS_A_WVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_WREADY, "(port)s_axi_BUS_A_WREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_WDATA, "(port)s_axi_BUS_A_WDATA");
    sc_trace(mVcdFile, s_axi_BUS_A_WSTRB, "(port)s_axi_BUS_A_WSTRB");
    sc_trace(mVcdFile, s_axi_BUS_A_ARVALID, "(port)s_axi_BUS_A_ARVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_ARREADY, "(port)s_axi_BUS_A_ARREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_ARADDR, "(port)s_axi_BUS_A_ARADDR");
    sc_trace(mVcdFile, s_axi_BUS_A_RVALID, "(port)s_axi_BUS_A_RVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_RREADY, "(port)s_axi_BUS_A_RREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_RDATA, "(port)s_axi_BUS_A_RDATA");
    sc_trace(mVcdFile, s_axi_BUS_A_RRESP, "(port)s_axi_BUS_A_RRESP");
    sc_trace(mVcdFile, s_axi_BUS_A_BVALID, "(port)s_axi_BUS_A_BVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_BREADY, "(port)s_axi_BUS_A_BREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_BRESP, "(port)s_axi_BUS_A_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, a, "a");
    sc_trace(mVcdFile, b, "b");
    sc_trace(mVcdFile, c_i, "c_i");
    sc_trace(mVcdFile, c_0_data_reg, "c_0_data_reg");
    sc_trace(mVcdFile, c_0_vld_reg, "c_0_vld_reg");
    sc_trace(mVcdFile, c_0_ack_out, "c_0_ack_out");
    sc_trace(mVcdFile, c_1_data_reg, "c_1_data_reg");
    sc_trace(mVcdFile, c_1_vld_reg, "c_1_vld_reg");
    sc_trace(mVcdFile, c_1_vld_in, "c_1_vld_in");
    sc_trace(mVcdFile, c_1_ack_in, "c_1_ack_in");
    sc_trace(mVcdFile, a_read_reg_64, "a_read_reg_64");
    sc_trace(mVcdFile, b_read_reg_69, "b_read_reg_69");
    sc_trace(mVcdFile, add_ln103_1_fu_58_p2, "add_ln103_1_fu_58_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln103_fu_53_p2, "add_ln103_fu_53_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("example.hdltvin.dat");
    mHdltvoutHandle.open("example.hdltvout.dat");
}

example::~example() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete example_BUS_A_s_axi_U;
}

void example::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void example::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, c_1_vld_reg.read()))) {
        c_1_vld_reg = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, c_1_vld_in.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_reg.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        c_1_vld_reg = ap_const_logic_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        a_read_reg_64 = a.read();
        b_read_reg_69 = b.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, c_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, c_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, c_0_ack_out.read())))) {
        c_0_data_reg = c_i.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, c_1_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        c_1_data_reg = add_ln103_1_fu_58_p2.read();
    }
}

void example::thread_add_ln103_1_fu_58_p2() {
    add_ln103_1_fu_58_p2 = (!add_ln103_fu_53_p2.read().is_01() || !b_read_reg_69.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln103_fu_53_p2.read()) + sc_biguint<8>(b_read_reg_69.read()));
}

void example::thread_add_ln103_fu_53_p2() {
    add_ln103_fu_53_p2 = (!a_read_reg_64.read().is_01() || !c_0_data_reg.read().is_01())? sc_lv<8>(): (sc_biguint<8>(a_read_reg_64.read()) + sc_biguint<8>(c_0_data_reg.read()));
}

void example::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void example::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void example::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void example::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(c_1_ack_in.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void example::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void example::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(c_1_ack_in.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void example::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void example::thread_c_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(c_1_ack_in.read(), ap_const_logic_1)))) {
        c_0_ack_out = ap_const_logic_1;
    } else {
        c_0_ack_out = ap_const_logic_0;
    }
}

void example::thread_c_1_ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, c_1_vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        c_1_ack_in = ap_const_logic_1;
    } else {
        c_1_ack_in = ap_const_logic_0;
    }
}

void example::thread_c_1_vld_in() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_1_vld_in = ap_const_logic_1;
    } else {
        c_1_vld_in = ap_const_logic_0;
    }
}

void example::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(c_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void example::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_AWVALID\" :  \"" << s_axi_BUS_A_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_BUS_A_AWREADY\" :  \"" << s_axi_BUS_A_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_AWADDR\" :  \"" << s_axi_BUS_A_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_WVALID\" :  \"" << s_axi_BUS_A_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_WREADY\" :  \"" << s_axi_BUS_A_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_WDATA\" :  \"" << s_axi_BUS_A_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_WSTRB\" :  \"" << s_axi_BUS_A_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_ARVALID\" :  \"" << s_axi_BUS_A_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_ARREADY\" :  \"" << s_axi_BUS_A_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_ARADDR\" :  \"" << s_axi_BUS_A_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_RVALID\" :  \"" << s_axi_BUS_A_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_RREADY\" :  \"" << s_axi_BUS_A_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_RDATA\" :  \"" << s_axi_BUS_A_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_RRESP\" :  \"" << s_axi_BUS_A_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_BVALID\" :  \"" << s_axi_BUS_A_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_BREADY\" :  \"" << s_axi_BUS_A_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_BRESP\" :  \"" << s_axi_BUS_A_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

